// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  CONTENT_CREATOR
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isActive      Boolean   @default(true)

  enrolledCourses Course[]
  role            UserRole @default(USER)

  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id    String @id @default(uuid())
  title String
  text  String

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Course {
  id          String   @id @default(uuid())
  name        String
  price       Float
  thumbnail   String
  description String   @default("") @db.Text
  reviews     Review[]
  featured    Boolean  @default(false)
  published   Boolean  @default(false)

  content String @default("") @db.Text

  // Relations
  enrolledUsers User[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  Module Module[]

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Module {
  id            String @id @default(uuid())
  name          String
  description   String @default("") @db.Text
  pdfFilePath   String
  audioFilePath String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Review {
  id       String @id @default(uuid())
  rating   Float
  comment  String @db.Text
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  Courses   Course[]
  thumbnail String

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Image {
  storedFileName   String @id @default(cuid())
  originalFileName String
  path             String

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
